{"dependencies":[{"name":"three","loc":{"line":3,"column":20}},{"name":"./common","loc":{"line":4,"column":23}}],"generated":{"js":"\"use strict\";\nexports.__esModule = true;\nvar THREE = require(\"three\");\nvar common_1 = require(\"./common\");\nvar GlobalGameJamGame = /** @class */ (function () {\n    function GlobalGameJamGame() {\n        this.mouse = new THREE.Vector2();\n        this.currentObject = null;\n    }\n    GlobalGameJamGame.prototype.init = function () {\n        var _this = this;\n        this.container = document.querySelector('#container') || common_1.expect();\n        this.renderer = new THREE.WebGLRenderer({ antialias: true });\n        this.renderer.setClearColor(new THREE.Color(0x6495ED));\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera();\n        this.camera.position.set(0, 10, 5);\n        this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n        this.raycaster = new THREE.Raycaster();\n        // Add basic building geometry.\n        // TODO: Add Roads? Maybe a mesh or maybe something more complex.\n        var x1 = -54;\n        var z1 = -54;\n        for (var x = -32; x < 32; x++) {\n            z1 = -50;\n            for (var z = -32; z < 32; z++) {\n                var height = Math.random() * 4;\n                THREE.Math.clamp(height, 1, 4);\n                var mat = new THREE.MeshPhysicalMaterial({ color: new THREE.Color(0xeaeaea) });\n                var cube = new THREE.Mesh(new THREE.CubeGeometry(1, height, 1), mat);\n                cube.position.set(x1, height / 2, z1);\n                console.log(x1, z1);\n                this.scene.add(cube);\n                z1 += 1;\n                if (z1 % 4 === 0) {\n                    z1 += 1;\n                }\n            }\n            x1 += 1;\n            if (x1 % 6 === 0) {\n                x1 += 1;\n            }\n        }\n        var plane = new THREE.Mesh(new THREE.PlaneGeometry(100, 100), new THREE.MeshLambertMaterial({ color: 0x101010 }));\n        plane.position.setX(-10);\n        plane.position.setZ(-10);\n        plane.rotateX(THREE.Math.degToRad(-90));\n        this.scene.add(plane);\n        var light = new THREE.AmbientLight(0xeaeaea);\n        this.scene.add(light);\n        var directionLight = new THREE.DirectionalLight(0xeaeaea);\n        directionLight.lookAt(new THREE.Vector3(0, 0, 0));\n        directionLight.position.set(20, 20, -20);\n        this.scene.add(directionLight);\n        this.container.appendChild(this.renderer.domElement);\n        document.body.addEventListener('keypress', function (ev) {\n            _this.onKeyPress(ev);\n        });\n        window.addEventListener('resize', function (ev) {\n            _this.onResize();\n        });\n        window.addEventListener('mousemove', function (ev) {\n            _this.onMouseMove(ev);\n        });\n        this.onResize();\n        this.update();\n    };\n    GlobalGameJamGame.prototype.update = function () {\n        this.raycaster.setFromCamera(this.mouse, this.camera);\n        var intersects = this.raycaster.intersectObjects(this.scene.children);\n        if (intersects.length > 0) {\n            intersects.sort(function (a, b) { return a.distance - b.distance; });\n            var obj = intersects[0].object;\n            if (obj instanceof THREE.Mesh &&\n                obj.material instanceof THREE.MeshPhysicalMaterial) {\n                if (this.currentObject &&\n                    this.currentObject.material instanceof THREE.MeshPhysicalMaterial) {\n                    this.currentObject.material.color.setHex(0xeaeaea);\n                }\n                obj.material.color.setHex(0xff0000);\n                this.currentObject = obj;\n            }\n        }\n        this.renderer.render(this.scene, this.camera);\n        requestAnimationFrame(this.update.bind(this));\n    };\n    GlobalGameJamGame.prototype.onKeyPress = function (ev) {\n        if (ev.key === 'w') {\n            this.camera.position.add(new THREE.Vector3(0, 0, -1));\n        }\n        else if (ev.key === 's') {\n            this.camera.position.add(new THREE.Vector3(0, 0, 1));\n        }\n        else if (ev.key === 'a') {\n            this.camera.position.add(new THREE.Vector3(-1, 0, 0));\n        }\n        else if (ev.key === 'd') {\n            this.camera.position.add(new THREE.Vector3(1, 0, 0));\n        }\n    };\n    GlobalGameJamGame.prototype.onResize = function () {\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n    };\n    GlobalGameJamGame.prototype.onMouseMove = function (ev) {\n        this.mouse.x = (ev.clientX / window.innerWidth) * 2 - 1;\n        this.mouse.y = -(ev.clientY / window.innerHeight) * 2 + 1;\n    };\n    return GlobalGameJamGame;\n}());\ndocument.addEventListener('DOMContentLoaded', function () {\n    var game = new GlobalGameJamGame();\n    game.init();\n});\n"},"hash":"39fca04049297e862ed7a06db4013a2c"}