{"dependencies":[{"name":"three","loc":{"line":3,"column":20}},{"name":"./Building","loc":{"line":4,"column":25}},{"name":"./common","loc":{"line":5,"column":23}},{"name":"./Road","loc":{"line":6,"column":21}}],"generated":{"js":"\"use strict\";\nexports.__esModule = true;\nvar THREE = require(\"three\");\nvar Building_1 = require(\"./Building\");\nvar common_1 = require(\"./common\");\nvar Road_1 = require(\"./Road\");\nvar GlobalGameJamGame = /** @class */ (function () {\n    function GlobalGameJamGame() {\n        this.mouse = new THREE.Vector2();\n        this.hoverObject = null;\n        this.selectedObject = null;\n    }\n    GlobalGameJamGame.prototype.init = function () {\n        var _this = this;\n        this.container = document.querySelector('#container') || common_1.expect();\n        this.buildingInfoPanel =\n            document.querySelector('#buildingInfoPanel') || common_1.expect();\n        this.renderer =\n            new THREE.WebGLRenderer({ antialias: true, devicePixelRatio: 128 });\n        this.renderer.setClearColor(new THREE.Color(0x101010));\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera();\n        this.camera.position.set(0, 10, 2);\n        this.camera.lookAt(new THREE.Vector3(0, 0, 0));\n        this.raycaster = new THREE.Raycaster();\n        this.mainTarget = new THREE.WebGLRenderTarget(256, 240, { minFilter: THREE.LinearFilter, magFilter: THREE.NearestFilter });\n        this.screenScene = new THREE.Scene();\n        this.screenScene.add(new THREE.Mesh(new THREE.PlaneBufferGeometry(2, 2, 1, 1), new THREE.MeshBasicMaterial({ map: this.mainTarget.texture })));\n        this.screenCamera = new THREE.OrthographicCamera(-1, 1, 1, -1);\n        this.screenCamera.position.setZ(100);\n        this.screenCamera.lookAt(new THREE.Vector3(0, 0, 0));\n        var light = new THREE.AmbientLight(0xeaeaea);\n        this.scene.add(light);\n        var directionLight = new THREE.DirectionalLight(0xeaeaea);\n        directionLight.lookAt(new THREE.Vector3(0, 0, 0));\n        directionLight.position.set(20, 20, -20);\n        this.scene.add(directionLight);\n        this.container.appendChild(this.renderer.domElement);\n        document.body.addEventListener('keypress', function (ev) {\n            _this.onKeyPress(ev);\n        });\n        window.addEventListener('resize', function (ev) {\n            _this.onResize();\n        });\n        this.container.addEventListener('mousemove', function (ev) {\n            _this.onMouseMove(ev);\n        });\n        this.container.addEventListener('click', function (ev) {\n            _this.onMouseClick();\n        });\n        this.generateMap(32, 32);\n        this.onResize();\n        this.update();\n    };\n    GlobalGameJamGame.prototype.update = function (frameTime) {\n        this.raycaster.setFromCamera(this.mouse, this.camera);\n        var intersects = this.raycaster.intersectObjects(this.scene.children);\n        if (intersects.length > 0) {\n            intersects.sort(function (a, b) { return a.distance - b.distance; });\n            var obj = intersects[0].object;\n            if (obj instanceof Building_1.Building) {\n                this.onHoverBuilding(obj);\n            }\n            else {\n                if (this.hoverObject &&\n                    this.hoverObject.state === Building_1.BuildingHoverState.Hovered) {\n                    this.hoverObject.changeState(Building_1.BuildingHoverState.Deselected);\n                }\n                this.hoverObject = null;\n            }\n        }\n        this.renderer.render(this.scene, this.camera, this.mainTarget, true);\n        this.renderer.render(this.screenScene, this.screenCamera);\n        requestAnimationFrame(this.update.bind(this));\n    };\n    GlobalGameJamGame.prototype.onKeyPress = function (ev) {\n        if (ev.key === 'w') {\n            this.camera.position.add(new THREE.Vector3(0, 0, -1));\n        }\n        else if (ev.key === 's') {\n            this.camera.position.add(new THREE.Vector3(0, 0, 1));\n        }\n        else if (ev.key === 'a') {\n            this.camera.position.add(new THREE.Vector3(-1, 0, 0));\n        }\n        else if (ev.key === 'd') {\n            this.camera.position.add(new THREE.Vector3(1, 0, 0));\n        }\n    };\n    GlobalGameJamGame.prototype.onResize = function () {\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n    };\n    GlobalGameJamGame.prototype.onMouseMove = function (ev) {\n        this.mouse.x = (ev.clientX / window.innerWidth) * 2 - 1;\n        this.mouse.y = -(ev.clientY / window.innerHeight) * 2 + 1;\n    };\n    GlobalGameJamGame.prototype.onMouseClick = function () {\n        if (!this.hoverObject) {\n            return;\n        }\n        if (this.selectedObject) {\n            this.selectedObject.changeState(Building_1.BuildingHoverState.Deselected);\n        }\n        this.selectedObject = this.hoverObject;\n        this.selectedObject.changeState(Building_1.BuildingHoverState.Selected);\n        this.buildingInfoPanel.innerText = \"=== BUILDING INFO PANEL ===\\nBLDID     = \" + this.selectedObject.getBuildingId() + \"\\nCONNECT   = \" + (this.selectedObject.getBuildingConnected() ? 'TRUE' : 'FALSE') + \"\\nBANDWIDTH = \" + this.selectedObject.getBuildingBandwidth();\n    };\n    GlobalGameJamGame.prototype.onHoverBuilding = function (building) {\n        if (building != this.hoverObject && building != this.selectedObject) {\n            if (this.hoverObject &&\n                this.hoverObject.state === Building_1.BuildingHoverState.Hovered) {\n                this.hoverObject.changeState(Building_1.BuildingHoverState.Deselected);\n            }\n            building.changeState(Building_1.BuildingHoverState.Hovered);\n            this.hoverObject = building;\n        }\n    };\n    GlobalGameJamGame.prototype.generateMap = function (width, height) {\n        var hasBuilding = [];\n        for (var x = 0; x < width; x++) {\n            hasBuilding.push([]);\n            for (var y = 0; y < height; y++) {\n                if (x % 4 === 0 || y % 4 === 0) {\n                    hasBuilding[x].push(false);\n                }\n                else {\n                    hasBuilding[x].push(true);\n                }\n            }\n        }\n        this.map = [];\n        for (var x = 0; x < width; x++) {\n            this.map.push([]);\n            for (var y = 0; y < height; y++) {\n                if (hasBuilding[x][y]) {\n                    var newBuilding = new Building_1.Building(Math.random() > 0.5 ?\n                        (Math.random() > 0.5 ?\n                            1.5 :\n                            (Math.random() > 0.5 ?\n                                1 :\n                                (Math.random() > 0.5 ? 0.5 : 0))) :\n                        2);\n                    newBuilding.position.setX(x - (width / 2));\n                    newBuilding.position.setZ(y - (height / 2));\n                    this.scene.add(newBuilding);\n                    this.map[x].push(newBuilding);\n                }\n                else {\n                    var up = hasBuilding[x] ?\n                        (hasBuilding[x][y - 1] === undefined ? true :\n                            hasBuilding[x][y - 1]) :\n                        true;\n                    var down = hasBuilding[x] ?\n                        (hasBuilding[x][y + 1] === undefined ? true :\n                            hasBuilding[x][y + 1]) :\n                        true;\n                    var left = hasBuilding[x - 1] ?\n                        (hasBuilding[x - 1][y] === undefined ? true :\n                            hasBuilding[x - 1][y]) :\n                        true;\n                    var right = hasBuilding[x + 1] ?\n                        (hasBuilding[x + 1][y] === undefined ? true :\n                            hasBuilding[x + 1][y]) :\n                        true;\n                    var newRoad = new Road_1.Road(up, down, left, right);\n                    newRoad.position.setX(x - (width / 2));\n                    newRoad.position.setZ(y - (height / 2));\n                    this.scene.add(newRoad);\n                    this.map[x].push(newRoad);\n                }\n            }\n        }\n    };\n    return GlobalGameJamGame;\n}());\ndocument.addEventListener('DOMContentLoaded', function () {\n    var game = new GlobalGameJamGame();\n    game.init();\n});\n"},"hash":"c9de2992772e8fd3b504a61a136736fe"}